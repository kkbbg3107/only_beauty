import pandas as pd
import os
from typing import Dict, List

class OnlyBeautySalaryCalculator:
    def __init__(self):
        # ÂúòÈ´îÊ•≠Á∏æÁçéÈáëÁ≠âÁ¥öË°®
        self.performance_bonus_levels = [
            (1800000, 2500000, 0.005),
            (2500001, 4000000, 0.01),
            (4000001, 6000000, 0.025),
            (6000001, 8000000, 0.045)
        ]
        
        # ÂúòÈ´îÊ∂àËÄóÁçéÈáëÁ≠âÁ¥öË°®
        self.consumption_bonus_levels = [
            (0, 1500000, 0.006),
            (1500001, 2500000, 0.01),
            (2500001, float('inf'), 0.015)
        ]
        
        # ÂÄã‰∫∫Ê•≠Á∏æÁçéÈáëÁ≠âÁ¥öË°®
        self.manager_performance_levels = [
            (0, 1000000, 0.008),
            (1000001, 1600000, 0.01),
            (1600001, 2100000, 0.016),
            (2100001, float('inf'), 0.021)
        ]
        
        self.consultant_performance_levels = [
            (0, 600000, 0.004),
            (600001, 1200000, 0.007),
            (1200001, 1700000, 0.008),
            (1700001, float('inf'), 0.012)
        ]
        
        # ÂÄã‰∫∫Ê∂àËÄóÁçéÈáëÁ≠âÁ¥öË°®
        self.manager_consumption_levels = [
            (0, 500000, 0.012),
            (500001, 1000000, 0.015),
            (1000001, float('inf'), 0.024)
        ]
        
        self.consultant_consumption_levels = [
            (0, 300000, 0.006),
            (300001, 600000, 0.008),
            (600001, float('inf'), 0.012)
        ]
        
        self.excel_data = None
        self.consultant_count = 0
        self.staff_count = 0
        self.manager_name = None  # Â∫óÈï∑ÂêçÁ®±
        
    def load_excel(self, file_path: str) -> bool:
        """ËºâÂÖ•ExcelÊ™îÊ°à‰∏¶ÊâæÂá∫Êï∏Â≠óÊúÄÂ§ßÁöÑÂ∑•‰ΩúË°®"""
        try:
            # Â±ïÈñã ~ Ë∑ØÂæë
            expanded_path = os.path.expanduser(file_path)
            print(f"Ê≠£Âú®Ê™¢Êü•Ë∑ØÂæë: {expanded_path}")
            
            if not os.path.exists(expanded_path):
                print(f"‚ùå ÈåØË™§ÔºöÊ™îÊ°à {expanded_path} ‰∏çÂ≠òÂú®")
                
                # Êèê‰æõË∑ØÂæëÂª∫Ë≠∞
                suggestions = self.suggest_file_paths(expanded_path)
                if suggestions:
                    print("\nüí° ÊâæÂà∞ÂèØËÉΩÁöÑÊ™îÊ°à‰ΩçÁΩÆ:")
                    for idx, path in enumerate(suggestions, 1):
                        print(f"   {idx}. {path}")
                    print("\nÊèêÁ§∫ÔºöÊÇ®ÂèØ‰ª•Ë§áË£ΩÊ≠£Á¢∫ÁöÑË∑ØÂæëÈáçÊñ∞Ëº∏ÂÖ•")
                else:
                    print("\nüí° Âª∫Ë≠∞Ê™¢Êü•:")
                    print("   - Ê™îÊ°àÊòØÂê¶Âú®Ê°åÈù¢Êàñ‰∏ãËºâË≥áÊñôÂ§æ")
                    print("   - Ê™îÊ°àÂêçÁ®±ÊãºÂØ´ÊòØÂê¶Ê≠£Á¢∫")
                    print("   - ÂèØ‰ª•Â∞áÊ™îÊ°àÊãñÊãΩÂà∞ÁµÇÁ´ØÁç≤ÂèñÂÆåÊï¥Ë∑ØÂæë")
                return False
            
            # ËÆÄÂèñÊâÄÊúâÂ∑•‰ΩúË°®ÂêçÁ®±
            xl_file = pd.ExcelFile(expanded_path)
            sheet_names = xl_file.sheet_names
            
            print(f"ÊâæÂà∞ÁöÑÂ∑•‰ΩúË°®: {sheet_names}")
            
            # ÁØ©ÈÅ∏Âá∫Êï∏Â≠óÂ∑•‰ΩúË°®ÂêçÁ®±
            numeric_sheets = []
            for sheet in sheet_names:
                # Ê™¢Êü•ÊòØÂê¶ÁÇ∫Á¥îÊï∏Â≠óÊàñÊï∏Â≠óÂ≠óÁ¨¶‰∏≤
                try:
                    if sheet.isdigit() or (isinstance(sheet, str) and sheet.replace('.', '').isdigit()):
                        numeric_sheets.append(int(float(sheet)))
                    # ‰πüÊé•ÂèóYYYYMMÊ†ºÂºèÔºàÂ¶Ç202412Ôºâ
                    elif isinstance(sheet, str) and len(sheet) == 6 and sheet.isdigit():
                        numeric_sheets.append(int(sheet))
                except ValueError:
                    continue
            
            if not numeric_sheets:
                print("ÈåØË™§ÔºöÊ≤íÊúâÊâæÂà∞Êï∏Â≠óÂ∑•‰ΩúË°®")
                return False
            
            # ÊâæÂá∫ÊúÄÂ§ßÁöÑÊï∏Â≠óÂ∑•‰ΩúË°®
            max_sheet = str(max(numeric_sheets))
            print(f"‰ΩøÁî®Â∑•‰ΩúË°®: {max_sheet}")
            
            # ËÆÄÂèñË©≤Â∑•‰ΩúË°®
            self.excel_data = pd.read_excel(expanded_path, sheet_name=max_sheet, header=None)
            print("ExcelÊ™îÊ°àËºâÂÖ•ÊàêÂäüÔºÅ")
            return True
            
        except Exception as e:
            print(f"ËºâÂÖ•ExcelÊ™îÊ°àÊôÇÁôºÁîüÈåØË™§: {e}")
            return False
    
    def suggest_file_paths(self, original_path: str) -> List[str]:
        """Áï∂Ê™îÊ°à‰∏çÂ≠òÂú®ÊôÇÔºåÊèê‰æõÂèØËÉΩÁöÑË∑ØÂæëÂª∫Ë≠∞"""
        suggestions = []
        filename = os.path.basename(original_path)
        
        # Â∏∏Ë¶ãÁöÑÁõÆÈåÑ‰ΩçÁΩÆ
        common_dirs = [
            "/Users/ben_kuo/Desktop",
            "/Users/ben_kuo/Downloads", 
            "/Users/ben_kuo/Documents",
            "/Users/ben_kuo/only_beauty_report",
            os.getcwd()  # Áï∂ÂâçÁõÆÈåÑ
        ]
        
        for directory in common_dirs:
            if os.path.exists(directory):
                potential_path = os.path.join(directory, filename)
                if os.path.exists(potential_path):
                    suggestions.append(potential_path)
        
        # ÊêúÂ∞ãÂåÖÂê´Áõ∏‰ººÂêçÁ®±ÁöÑÊ™îÊ°à
        try:
            base_name = os.path.splitext(filename)[0]
            for root, dirs, files in os.walk("/Users/ben_kuo"):
                for file in files:
                    if (file.endswith(('.xlsx', '.xls')) and 
                        (base_name.lower() in file.lower() or file.lower() in base_name.lower())):
                        suggestions.append(os.path.join(root, file))
                        if len(suggestions) >= 5:  # ÈôêÂà∂Âª∫Ë≠∞Êï∏Èáè
                            break
                if len(suggestions) >= 5:
                    break
        except Exception:
            pass
        
        return list(set(suggestions))  # ÂéªÈô§ÈáçË§á
    
    def get_consultants_data(self) -> List[Dict]:
        """Áç≤ÂèñÈ°ßÂïèË≥áÊñô"""
        if self.excel_data is None:
            return []
        
        consultants = []
        row = 8  # A9Â∞çÊáâindex 8
        
        while row < len(self.excel_data):
            consultant_name = self.excel_data.iloc[row, 0]  # AÊ¨Ñ
            
            # Â¶ÇÊûúÈÅáÂà∞Á©∫ÂÄºÊàñNaNÔºåÂÅúÊ≠¢
            if pd.isna(consultant_name) or consultant_name == "":
                break
                
            # Ë∑≥ÈÅé"ÂÖ¨Âè∏"
            if str(consultant_name).strip() != "ÂÖ¨Âè∏":
                personal_performance = self.excel_data.iloc[row, 2] if not pd.isna(self.excel_data.iloc[row, 2]) else 0  # CÊ¨Ñ
                personal_consumption = self.excel_data.iloc[row, 6] if not pd.isna(self.excel_data.iloc[row, 6]) else 0  # GÊ¨Ñ
                
                consultants.append({
                    'name': consultant_name,
                    'performance': float(personal_performance),
                    'consumption': float(personal_consumption),
                    'row': row + 1  # È°ØÁ§∫ExcelÂØ¶ÈöõË°åËôü
                })
            
            row += 1
        
        self.consultant_count = len(consultants)
        return consultants
    
    def calculate_consultant_bonus(self, product_bonuses: Dict = None) -> Dict:
        """Ë®àÁÆóÈ°ßÂïèÁçéÈáëÔºàÁ¥ØÈÄ≤Âà∂ÔºâÔºåÁî¢ÂìÅÊú™ÈÅîÊ®ôËÄÖÊ∏ÖÈõ∂"""
        if self.excel_data is None:
            return {}
        total_performance = self.excel_data.iloc[4, 4] if not pd.isna(self.excel_data.iloc[4, 4]) else 0  # E5
        total_consumption = self.excel_data.iloc[6, 4] if not pd.isna(self.excel_data.iloc[6, 4]) else 0  # E7
        consultants = self.get_consultants_data()
        if not consultants:
            return {}
        print(f"Á∏ΩÊ•≠Á∏æ (E5): {total_performance:,.0f}")
        print(f"Á∏ΩÊ∂àËÄó (E7): {total_consumption:,.0f}")
        # Ê•≠Á∏æÁçéÈáëÁ¥ØÈÄ≤Âà∂
        consultant_performance_pool = self.calc_progressive_bonus(total_performance, self.performance_bonus_levels) * 0.7
        # Ê∂àËÄóÁçéÈáëÁ¥ØÈÄ≤Âà∂
        consultant_consumption_pool = self.calc_progressive_bonus(total_consumption, self.consumption_bonus_levels) * 0.4
        print(f"È°ßÂïèÂúòÈ´îÊ•≠Á∏æÁçéÈáëÊ±†(Á¥ØÈÄ≤): {consultant_performance_pool:,.0f}")
        print(f"È°ßÂïèÂúòÈ´îÊ∂àËÄóÁçéÈáëÊ±†(Á¥ØÈÄ≤): {consultant_consumption_pool:,.0f}")
        total_consultant_performance = sum(c['performance'] for c in consultants)
        consultant_bonuses = {}
        for consultant in consultants:
            # Ê™¢Êü•Áî¢ÂìÅÈÅîÊ®ôÁãÄÊ≥Å
            product_qualified = True  # È†êË®≠ÈÅîÊ®ô
            if product_bonuses and consultant['name'] in product_bonuses:
                product_qualified = product_bonuses[consultant['name']]['qualified']
            
            # ÈÅîÊ®ôÊâçÂàÜÈÖç
            perf_ok = consultant['performance'] >= 1680000
            cons_ok = consultant['performance'] >= 1200000
            
            # Â¶ÇÊûúÁî¢ÂìÅÊú™ÈÅîÊ®ôÔºåÊ∏ÖÈõ∂ÊâÄÊúâÁçéÈáë
            if not product_qualified:
                performance_bonus = 0
                consumption_bonus = 0
                print(f"  {consultant['name']}: Áî¢ÂìÅÊú™ÈÅîÊ®ôÔºåÂúòÈ´îÁçéÈáëÊ∏ÖÈõ∂")
            else:
                # Ê•≠Á∏æÁçéÈáëÂàÜÈÖç
                if perf_ok and total_consultant_performance > 0:
                    performance_ratio = consultant['performance'] / total_consultant_performance
                    performance_bonus = consultant_performance_pool * performance_ratio
                else:
                    performance_bonus = 0
                # Ê∂àËÄóÁçéÈáëÂàÜÈÖç
                if cons_ok and total_consumption > 0:
                    consumption_ratio = consultant['consumption'] / total_consumption
                    consumption_bonus = consultant_consumption_pool * consumption_ratio
                else:
                    consumption_bonus = 0
            
            consultant_bonuses[consultant['name']] = {
                'performance_bonus': performance_bonus,
                'consumption_bonus': consumption_bonus,
                'total_bonus': performance_bonus + consumption_bonus,
                'personal_performance': consultant['performance'],
                'personal_consumption': consultant['consumption'],
                'product_qualified': product_qualified
            }
        return consultant_bonuses

    def calculate_staff_bonus(self) -> Dict:
        """Ë®àÁÆóÁæéÂÆπÂ∏´/Ë≠∑Â£´ÁçéÈáëÔºàÁ¥ØÈÄ≤Âà∂Ôºâ"""
        if self.excel_data is None or self.staff_count == 0:
            return {}
        total_performance = self.excel_data.iloc[4, 4] if not pd.isna(self.excel_data.iloc[4, 4]) else 0  # E5
        total_consumption = self.excel_data.iloc[6, 4] if not pd.isna(self.excel_data.iloc[6, 4]) else 0  # E7
        # Ê•≠Á∏æÁçéÈáëÁ¥ØÈÄ≤Âà∂
        staff_performance_pool = self.calc_progressive_bonus(total_performance, self.performance_bonus_levels) * 0.3
        # Ê∂àËÄóÁçéÈáëÁ¥ØÈÄ≤Âà∂
        staff_consumption_pool = self.calc_progressive_bonus(total_consumption, self.consumption_bonus_levels) * 0.6
        performance_bonus_per_person = staff_performance_pool / self.staff_count
        consumption_bonus_per_person = staff_consumption_pool / self.staff_count
        return {
            'staff_count': self.staff_count,
            'performance_pool': staff_performance_pool,
            'consumption_pool': staff_consumption_pool,
            'performance_bonus_per_person': performance_bonus_per_person,
            'consumption_bonus_per_person': consumption_bonus_per_person,
            'total_bonus_per_person': performance_bonus_per_person + consumption_bonus_per_person
        }
    
    def calculate_individual_bonus(self, consultant_bonuses: Dict) -> Dict:
        """Ë®àÁÆóÂÄã‰∫∫Ê•≠Á∏æÁçéÈáëÂíåÂÄã‰∫∫Ê∂àËÄóÁçéÈáë"""
        individual_bonuses = {}
        
        print("\nÈñãÂßãË®àÁÆóÂÄã‰∫∫ÁçéÈáë...")
        print(f"Â∫óÈï∑: {self.manager_name}")
        
        for name, bonus_data in consultant_bonuses.items():
            performance = bonus_data['personal_performance']
            consumption = bonus_data['personal_consumption']
            
            # Âà§Êñ∑ÊòØÂê¶ÁÇ∫Â∫óÈï∑
            is_manager = (name == self.manager_name)
            
            # ÈÅ∏ÊìáÂ∞çÊáâÁöÑÁ¥öË∑ùË°®
            if is_manager:
                perf_levels = self.manager_performance_levels
                cons_levels = self.manager_consumption_levels
                role = "Â∫óÈï∑"
            else:
                perf_levels = self.consultant_performance_levels
                cons_levels = self.consultant_consumption_levels
                role = "È°ßÂïè"
            
            # Ë®àÁÆóÂÄã‰∫∫Ê•≠Á∏æÁçéÈáë
            individual_performance_bonus = self.calc_progressive_bonus(performance, perf_levels, show_detail=False)
            
            # Ë®àÁÆóÂÄã‰∫∫Ê∂àËÄóÁçéÈáë
            individual_consumption_bonus = self.calc_progressive_bonus(consumption, cons_levels, show_detail=False)
            
            individual_bonuses[name] = {
                'role': role,
                'individual_performance_bonus': individual_performance_bonus,
                'individual_consumption_bonus': individual_consumption_bonus,
                'individual_total': individual_performance_bonus + individual_consumption_bonus
            }
            
            print(f"  {name} ({role}):")
            print(f"    ÂÄã‰∫∫Ê•≠Á∏æÁçéÈáë: {individual_performance_bonus:,.0f}")
            print(f"    ÂÄã‰∫∫Ê∂àËÄóÁçéÈáë: {individual_consumption_bonus:,.0f}")
            print(f"    ÂÄã‰∫∫ÁçéÈáëÂ∞èË®à: {individual_performance_bonus + individual_consumption_bonus:,.0f}")
        
        return individual_bonuses
    
    def display_results(self, consultant_bonuses: Dict, staff_bonuses: Dict, product_bonuses: Dict = None, individual_bonuses: Dict = None):
        """È°ØÁ§∫Ë®àÁÆóÁµêÊûú"""
        print("\n" + "="*70)
        print("Ëñ™Ë≥áË®àÁÆóÁµêÊûú")
        print("="*70)
        
        if consultant_bonuses:
            print("\nÈ°ßÂïèÁçéÈáëÊòéÁ¥∞:")
            print("-" * 60)
            for name, bonus in consultant_bonuses.items():
                print(f"{name}:")
                print(f"  ÂÄã‰∫∫Ê•≠Á∏æ: {bonus['personal_performance']:,.0f}")
                print(f"  ÂÄã‰∫∫Ê∂àËÄó: {bonus['personal_consumption']:,.0f}")
                print(f"  ÂúòÈ´îÊ•≠Á∏æÁçéÈáë: {bonus['performance_bonus']:,.0f}")
                print(f"  ÂúòÈ´îÊ∂àËÄóÁçéÈáë: {bonus['consumption_bonus']:,.0f}")
                
                # Âä†ÂÖ•Áî¢ÂìÅÈÅîÊ®ôÁçéÈáë
                product_bonus = 0
                if product_bonuses and name in product_bonuses:
                    product_bonus = product_bonuses[name]['bonus']
                    sales_count = product_bonuses[name]['sales_count']
                    print(f"  Áî¢ÂìÅÈä∑ÂîÆ: {sales_count} ÁµÑ")
                    print(f"  Áî¢ÂìÅÈÅîÊ®ôÁçéÈáë: {product_bonus:,.0f}")
                    
                    # È°ØÁ§∫Áî¢ÂìÅÈÅîÊ®ôÁãÄÊ≥Å
                    if not product_bonuses[name]['qualified']:
                        print("  ‚ö†Ô∏è  Áî¢ÂìÅÊú™ÈÅîÊ®ôÔºåÂúòÈ´îÁçéÈáëÂ∑≤Ê∏ÖÈõ∂")
                
                # Âä†ÂÖ•ÂÄã‰∫∫ÁçéÈáë
                individual_performance_bonus = 0
                individual_consumption_bonus = 0
                if individual_bonuses and name in individual_bonuses:
                    individual_performance_bonus = individual_bonuses[name]['individual_performance_bonus']
                    individual_consumption_bonus = individual_bonuses[name]['individual_consumption_bonus']
                    role = individual_bonuses[name]['role']
                    print(f"  ÂÄã‰∫∫Ê•≠Á∏æÁçéÈáë: {individual_performance_bonus:,.0f} ({role})")
                    print(f"  ÂÄã‰∫∫Ê∂àËÄóÁçéÈáë: {individual_consumption_bonus:,.0f} ({role})")
                
                team_total = bonus['total_bonus'] + product_bonus
                individual_total = individual_performance_bonus + individual_consumption_bonus
                grand_total = team_total + individual_total
                
                print(f"  ÂúòÈ´îÁçéÈáëÂ∞èË®à: {bonus['total_bonus']:,.0f}")
                print(f"  ÂúòÈ´î+Áî¢ÂìÅÁçéÈáë: {team_total:,.0f}")
                print(f"  ÂÄã‰∫∫ÁçéÈáëÂ∞èË®à: {individual_total:,.0f}")
                print(f"  „ÄêÁ∏ΩÁçéÈáë„Äë: {grand_total:,.0f}")
                print()
        
        if staff_bonuses:
            print("ÁæéÂÆπÂ∏´/Ë≠∑Â£´ÁçéÈáë:")
            print("-" * 60)
            print(f"Á∏Ω‰∫∫Êï∏: {staff_bonuses['staff_count']} ‰∫∫")
            print(f"Ê•≠Á∏æÁçéÈáëÊ±†: {staff_bonuses['performance_pool']:,.0f}")
            print(f"Ê∂àËÄóÁçéÈáëÊ±†: {staff_bonuses['consumption_pool']:,.0f}")
            print(f"ÊØè‰∫∫Ê•≠Á∏æÁçéÈáë: {staff_bonuses['performance_bonus_per_person']:,.0f}")
            print(f"ÊØè‰∫∫Ê∂àËÄóÁçéÈáë: {staff_bonuses['consumption_bonus_per_person']:,.0f}")
            print(f"ÊØè‰∫∫Á∏ΩÁçéÈáë: {staff_bonuses['total_bonus_per_person']:,.0f}")
        
        if product_bonuses:
            print("\nÁî¢ÂìÅÈÅîÊ®ôÁçéÈáëÊëòË¶Å:")
            print("-" * 60)
            total_product_bonus = sum(p['bonus'] for p in product_bonuses.values())
            qualified_count = sum(1 for p in product_bonuses.values() if p['qualified'])
            print(f"ÈÅîÊ®ô‰∫∫Êï∏: {qualified_count} ‰∫∫")
            print(f"Áî¢ÂìÅÈÅîÊ®ôÁçéÈáëÁ∏ΩÈ°ç: {total_product_bonus:,.0f} ÂÖÉ")
    
    def calc_progressive_bonus(self, amount: float, levels: List[tuple], show_detail: bool = True) -> float:
        """Á¥ØÈÄ≤Âà∂Ë®àÁÆóÁçéÈáëÔºålevels=[(min,max,rate), ...]"""
        total = 0
        for min_val, max_val, rate in levels:
            if amount > min_val:
                # Ë®àÁÆóÈÄôÂÄãÂçÄÈñìÁöÑÁçéÈáë
                upper_bound = min(amount, max_val)
                taxable_amount = upper_bound - min_val
                bonus_for_this_level = taxable_amount * rate
                total += bonus_for_this_level
                if show_detail:
                    print(f"  ÈöéÊÆµ ({min_val:,}-{max_val:,}): {taxable_amount:,.0f} √ó {rate:.3f} = {bonus_for_this_level:,.2f}")
            if amount <= max_val:
                break
        return total
    
    def get_product_sales_statistics(self, file_path: str) -> Dict:
        """Áµ±Ë®àÊâÄÊúâÈ°ßÂïèÁöÑÁî¢ÂìÅÈä∑ÂîÆÁµÑÊï∏"""
        try:
            expanded_path = os.path.expanduser(file_path)
            xl_file = pd.ExcelFile(expanded_path)
            sheet_names = xl_file.sheet_names
            
            # Áµ±Ë®àÊØèÂÄãÈ°ßÂïèÁöÑÁî¢ÂìÅÈä∑ÂîÆÊï∏Èáè
            consultant_product_sales = {}
            
            print("\nÈñãÂßãÁµ±Ë®àÁî¢ÂìÅÈä∑ÂîÆ...")
            
            for sheet_name in sheet_names:
                print(f"Ê≠£Âú®Ê™¢Êü•Â∑•‰ΩúË°®: {sheet_name}")
                
                try:
                    # ËÆÄÂèñÂ∑•‰ΩúË°®
                    df = pd.read_excel(expanded_path, sheet_name=sheet_name, header=None)
                    
                    # ÂæûÁ¨¨17Ë°åÈñãÂßãÊ™¢Êü• (F17Â∞çÊáâindex 16)
                    for row_idx in range(16, len(df)):
                        # Ê™¢Êü•FÊ¨Ñ (index 5) ÊòØÂê¶ÂåÖÂê´ "Ë≥ºÁî¢ÂìÅ"
                        f_cell = df.iloc[row_idx, 5] if row_idx < len(df) and 5 < len(df.columns) else None
                        
                        if pd.notna(f_cell) and "Ë≥ºÁî¢ÂìÅ" in str(f_cell):
                            # ÂèñÂæóOÊ¨Ñ (index 14) ÁöÑÈ°ßÂïè‰ª£Ëôü
                            o_cell = df.iloc[row_idx, 14] if row_idx < len(df) and 14 < len(df.columns) else None
                            
                            if pd.notna(o_cell):
                                consultant_code = str(o_cell).strip()
                                
                                # ÂàùÂßãÂåñÈ°ßÂïèÁöÑÈä∑ÂîÆË®àÊï∏
                                if consultant_code not in consultant_product_sales:
                                    consultant_product_sales[consultant_code] = 0
                                
                                # Â¢ûÂä†‰∏ÄÁµÑÁî¢ÂìÅÈä∑ÂîÆ
                                consultant_product_sales[consultant_code] += 1
                                
                                print(f"  Â∑•‰ΩúË°® {sheet_name}, Á¨¨{row_idx+1}Ë°å: È°ßÂïè {consultant_code} Ë≥£Âá∫Áî¢ÂìÅ")
                
                except Exception as e:
                    print(f"  Ë∑≥ÈÅéÂ∑•‰ΩúË°® {sheet_name}: {e}")
                    continue
            
            return consultant_product_sales
            
        except Exception as e:
            print(f"Áµ±Ë®àÁî¢ÂìÅÈä∑ÂîÆÊôÇÁôºÁîüÈåØË™§: {e}")
            return {}
    
    def calculate_product_bonus(self, product_sales: Dict) -> Dict:
        """Ë®àÁÆóÁî¢ÂìÅÈÅîÊ®ôÁçéÈáëÔºà30ÁµÑ‰ª•‰∏äÂæó2000ÂÖÉÔºâ"""
        product_bonuses = {}
        
        print("\nÁî¢ÂìÅÈä∑ÂîÆÁµ±Ë®à:")
        print("-" * 40)
        
        for consultant, sales_count in product_sales.items():
            # ÈÅîÂà∞30ÁµÑ‰ª•‰∏äÂ∞±Êúâ2000ÂÖÉÁçéÈáë
            bonus = 2000 if sales_count >= 30 else 0
            product_bonuses[consultant] = {
                'sales_count': sales_count,
                'bonus': bonus,
                'qualified': sales_count >= 30
            }
            
            status = "‚úì ÈÅîÊ®ô" if sales_count >= 30 else "‚úó Êú™ÈÅîÊ®ô"
            print(f"{consultant}: {sales_count} ÁµÑ ‚Üí {bonus:,}ÂÖÉ {status}")
        
        return product_bonuses

    def run(self):
        """‰∏ªÁ®ãÂºèÈÅãË°å"""
        print("Only Beauty Ëñ™Ë≥áË®àÁÆóÁ≥ªÁµ±")
        print("="*40)
        print("ÊèêÁ§∫Ôºö")
        print("‚Ä¢ Ëº∏ÂÖ• 'exit' Êàñ 'quit' ÂèØÈö®ÊôÇÈÄÄÂá∫Á®ãÂºè")
        print("‚Ä¢ ÂèØ‰ΩøÁî® ~ ‰ª£Ë°®Áî®Êà∂‰∏ªÁõÆÈåÑÔºå‰æãÂ¶Ç: ~/only_beauty_report/Ê™îÊ°àÂêç.xlsx")
        print("‚Ä¢ Êåâ Ctrl+C Âº∑Âà∂ÁµÇÊ≠¢Á®ãÂºè")
        print()
        
        try:
            # Ê≠•È©ü1: Ëº∏ÂÖ•ExcelÊ™îÊ°àË∑ØÂæë
            while True:
                print("ÁØÑ‰æãË∑ØÂæëÊ†ºÂºè:")
                print("  ~/only_beauty_report/Hsinchu202506.xlsx")
                print("  /Users/ben_kuo/Desktop/Ê™îÊ°àÂêç.xlsx")
                excel_path = input("\nË´ãËº∏ÂÖ•ExcelÊ™îÊ°àË∑ØÂæë: ").strip()
                
                # Ê™¢Êü•ÈÄÄÂá∫ÂëΩ‰ª§
                if excel_path.lower() in ['exit', 'quit', 'q']:
                    print("Á®ãÂºèÂ∑≤ÈÄÄÂá∫")
                    return
                
                if self.load_excel(excel_path):
                    break
                print("Ë´ãÈáçÊñ∞Ëº∏ÂÖ•Ê≠£Á¢∫ÁöÑÊ™îÊ°àË∑ØÂæë\n")
            
            # Ê≠•È©ü2: Ëº∏ÂÖ•ÁæéÂÆπÂ∏´/Ë≠∑Â£´‰∫∫Êï∏
            while True:
                try:
                    staff_input = input("Ë´ãËº∏ÂÖ•ÁæéÂÆπÂ∏´/Ë≠∑Â£´Á∏Ω‰∫∫Êï∏: ").strip()
                    
                    # Ê™¢Êü•ÈÄÄÂá∫ÂëΩ‰ª§
                    if staff_input.lower() in ['exit', 'quit', 'q']:
                        print("Á®ãÂºèÂ∑≤ÈÄÄÂá∫")
                        return
                    
                    staff_count = int(staff_input)
                    if staff_count > 0:
                        self.staff_count = staff_count
                        break
                    else:
                        print("‰∫∫Êï∏ÂøÖÈ†àÂ§ßÊñº0")
                except ValueError:
                    print("Ë´ãËº∏ÂÖ•ÊúâÊïàÁöÑÊï∏Â≠ó")
            
            # Ê≠•È©ü3: Ëº∏ÂÖ•Â∫óÈï∑ÂêçÁ®±
            while True:
                manager_input = input("Ë´ãËº∏ÂÖ•Â∫óÈï∑ÂêçÁ®± (Â¶ÇÊûúÊ≤íÊúâÂ∫óÈï∑Ë´ãËº∏ÂÖ• 'none'): ").strip()
                
                # Ê™¢Êü•ÈÄÄÂá∫ÂëΩ‰ª§
                if manager_input.lower() in ['exit', 'quit', 'q']:
                    print("Á®ãÂºèÂ∑≤ÈÄÄÂá∫")
                    return
                
                if manager_input.lower() == 'none':
                    self.manager_name = None
                    print("Â∑≤Ë®≠ÂÆöÁÑ°Â∫óÈï∑")
                    break
                elif manager_input:
                    self.manager_name = manager_input
                    print(f"Â∫óÈï∑Ë®≠ÂÆöÁÇ∫: {self.manager_name}")
                    break
                else:
                    print("Ë´ãËº∏ÂÖ•Â∫óÈï∑ÂêçÁ®±Êàñ 'none'")
            
            # Ê≠•È©ü4: Áµ±Ë®àÁî¢ÂìÅÈä∑ÂîÆ‰∏¶Ë®àÁÆóÁî¢ÂìÅÈÅîÊ®ôÁçéÈáë
            print("\nÈñãÂßãÁµ±Ë®àÁî¢ÂìÅÈä∑ÂîÆ...")
            product_sales = self.get_product_sales_statistics(excel_path)
            product_bonuses = self.calculate_product_bonus(product_sales)
            
            # Ê≠•È©ü5: Ë®àÁÆóÂúòÈ´îÁçéÈáëÔºàËÄÉÊÖÆÁî¢ÂìÅÈÅîÊ®ôÁãÄÊ≥ÅÔºâ
            print("\nÈñãÂßãË®àÁÆóÂúòÈ´îÁçéÈáë...")
            consultant_bonuses = self.calculate_consultant_bonus(product_bonuses)
            staff_bonuses = self.calculate_staff_bonus()
            
            # Ê≠•È©ü6: Ë®àÁÆóÂÄã‰∫∫ÁçéÈáë
            individual_bonuses = self.calculate_individual_bonus(consultant_bonuses)
            
            # Ê≠•È©ü7: È°ØÁ§∫ÁµêÊûú
            self.display_results(consultant_bonuses, staff_bonuses, product_bonuses, individual_bonuses)
            
        except KeyboardInterrupt:
            print("\n\nÁ®ãÂºèÂ∑≤Ë¢´Áî®Êà∂‰∏≠Êñ∑ (Ctrl+C)")
            print("ÊÑüË¨ù‰ΩøÁî® Only Beauty Ëñ™Ë≥áË®àÁÆóÁ≥ªÁµ±ÔºÅ")
        except EOFError:
            print("\n\nÁ®ãÂºèÂ∑≤ÁµêÊùü")
            print("ÊÑüË¨ù‰ΩøÁî® Only Beauty Ëñ™Ë≥áË®àÁÆóÁ≥ªÁµ±ÔºÅ")

if __name__ == "__main__":
    calculator = OnlyBeautySalaryCalculator()
    calculator.run()
